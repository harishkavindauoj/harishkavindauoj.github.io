name: Update Portfolio

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update portfolio
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json
        
        cat > update.js << 'EOF'
        const fs = require('fs');
        const https = require('https');

        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.YOUTUBE_API_KEY;
        const CHANNEL_ID = process.env.YOUTUBE_CHANNEL_ID;

        let html = fs.readFileSync('index.html', 'utf8');

        function fetchYouTubeVideos() {
          const url = `https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&channelId=${CHANNEL_ID}&part=snippet&order=date&maxResults=50`;
          return new Promise((resolve, reject) => {
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  resolve(json.items || []);
                } catch (err) {
                  reject(err);
                }
              });
            }).on('error', reject);
          });
        }

        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }

        (async () => {
          const youTubeVideos = await fetchYouTubeVideos();

          const repos = GITHUB_REPOS
            .filter(repo => !repo.fork && !repo.private && repo.description && repo.description.length > 10 &&
                            !repo.name.includes('.github.io') &&
                            !repo.name.toLowerCase().includes('config') &&
                            !repo.name.toLowerCase().includes('readme'))
            .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
            .slice(0, 5);

          console.log(`Found ${repos.length} repositories to display:`);

          let projectCards = '';
          for (const repo of repos) {
            const name = formatRepoName(repo.name);
            const description = repo.description;
            const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });

            console.log(`- ${repo.name}: ${repo.stargazers_count} stars`);

            // Match video by title containing repo name
            const matched = youTubeVideos.find(video =>
              video.snippet?.title?.toLowerCase().includes(repo.name.toLowerCase())
            );

            let videoEmbed = '';
            if (matched && matched.id.videoId) {
              videoEmbed = `
                <iframe width="100%" height="200" 
                  src="https://www.youtube.com/embed/${matched.id.videoId}" 
                  frameborder="0" 
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                  allowfullscreen 
                  style="border-radius: 8px; margin: 10px 0;">
                </iframe>`;
            } else {
              const videoFileName = repo.name.toLowerCase() + '.mp4';
              videoEmbed = `
                <video autoplay muted loop style="width: 100%; max-height: 200px; border-radius: 8px; margin: 10px 0;">
                  <source src="videos/${videoFileName}" type="video/mp4">
                </video>`;
            }

            projectCards += `
              <div class="project-card">
                <div class="project-content">
                  <h3><a href="${repo.html_url}" target="_blank" style="color: #ffd700; text-decoration: none;">${name}</a></h3>
                  <p>${description}</p>
                  <div class="project-video">${videoEmbed}</div>
                  <div class="project-stats">
                    <span>‚≠ê ${repo.stargazers_count}</span>
                    <span>üìÖ ${date}</span>
                    ${repo.language ? `<span>üíª ${repo.language}</span>` : ''}
                  </div>
                </div>
              </div>`;
          }

          projectCards += `
              <div class="project-card">
                <div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">
                  <h3><a href="https://github.com/harishkavindauoj?tab=repositories" target="_blank" style="font-size: 4rem; color: #ffd700; text-decoration: none;">See More..</a></h3>
                </div>
              </div>`;

          const regex = /<div class="project-cards">[\s\S]*?<\/div>/;
          const replacement = `<div class="project-cards">${projectCards}</div>`;
          html = html.replace(regex, replacement);

          const now = new Date().toLocaleString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Asia/Colombo',
            timeZoneName: 'short'
          });

          const metadataHtml = `<div class="portfolio-metadata">Last updated: <span class="last-updated">${now}</span></div>`;
          if (html.includes('portfolio-metadata')) {
            html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
          } else {
            html = html.replace(/(<footer)/, `${metadataHtml}\n\n    $1`);
          }

          fs.writeFileSync('index.html', html);
          console.log('Portfolio updated successfully!');
        })().catch(err => {
          console.error('Error:', err.message);
          process.exit(1);
        });
        EOF

        node update.js
        
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "ü§ñ Auto-update portfolio with latest projects"
        git push
