name: Update Portfolio (Fixed Version)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Fetch GitHub repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json

    - name: Create update script
      run: |
        cat > update.js << 'SCRIPT_END'
        const fs = require('fs');
        const https = require('https');

        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.GOOGLE_DRIVE_API_KEY;
        const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;

        let html = fs.readFileSync('index.html', 'utf8');

        function fetchDriveVideos() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('Google Drive API credentials missing, skipping video fetch');
            return Promise.resolve([]);
          }

          const url = 'https://www.googleapis.com/drive/v3/files?key=' + API_KEY + 
                     '&q=\'' + FOLDER_ID + '\'+in+parents+and+(mimeType+contains+\'video\'+or+name+contains+\'.mp4\'+or+name+contains+\'.avi\'+or+name+contains+\'.mov\'+or+name+contains+\'.mkv\')&fields=files(id,name,webViewLink,webContentLink,thumbnailLink,videoMediaMetadata,mimeType)&pageSize=100';
          
          return new Promise((resolve, reject) => {
            console.log('Fetching Google Drive videos...');
            
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  
                  if (json.error) {
                    console.error('Google Drive API Error:', json.error.message);
                    resolve([]);
                    return;
                  }
                  
                  const videos = json.files || [];
                  console.log('Found ' + videos.length + ' videos in Google Drive folder');
                  resolve(videos);
                } catch (err) {
                  console.error('Error parsing Google Drive response:', err.message);
                  resolve([]);
                }
              });
            }).on('error', err => {
              console.error('Error fetching Google Drive videos:', err.message);
              resolve([]);
            });
          });
        }

        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }

        function findMatchingVideo(repoName, videos) {
          console.log('Looking for video matching repo: "' + repoName + '"');
          
          const searchTerms = [
            repoName.toLowerCase(),
            repoName.replace(/[-_]/g, ' ').toLowerCase(),
            repoName.replace(/[-_]/g, '').toLowerCase(),
            repoName.replace(/[-_]/g, '-').toLowerCase(),
            repoName.replace(/[-_]/g, '_').toLowerCase(),
          ];
          
          for (const term of searchTerms) {
            const match = videos.find(video => {
              const fileName = (video.name || '').toLowerCase();
              const fileNameNoExt = fileName.replace(/\.(mp4|avi|mov|mkv|webm)$/i, '');
              
              return fileName.includes(term) || 
                     fileNameNoExt.includes(term) || 
                     fileName.replace(/[-_\s]/g, '').includes(term.replace(/[-_\s]/g, ''));
            });
            
            if (match) {
              console.log('Found matching video for "' + repoName + '": "' + match.name + '"');
              return match;
            }
          }
          
          console.log('No matching video found for "' + repoName + '"');
          return null;
        }

        function getVideoEmbedUrl(fileId) {
          return 'https://drive.google.com/file/d/' + fileId + '/preview';
        }

        function getExistingProjects() {
          const existingRepos = new Set();
          const githubUrlRegex = /href="https:\/\/github\.com\/harishkavindauoj\/([^"/?#]+)"/g;
          let match;
          
          while ((match = githubUrlRegex.exec(html)) !== null) {
            const repoName = match[1];
            if (repoName !== 'harishkavindauoj' && !repoName.includes('.github.io')) {
              existingRepos.add(repoName);
            }
          }
          
          console.log('Found ' + existingRepos.size + ' existing projects in portfolio');
          return existingRepos;
        }

        function cleanUpMalformedHTML() {
          console.log('Cleaning up potentially malformed HTML...');
          
          // Remove any orphaned closing </div> tags that might be floating around
          html = html.replace(/^\s*<\/div>\s*$/gm, '');
          
          // Fix any broken project cards (incomplete structures)
          const brokenCardPattern = /<div class="project-card">\s*<div class="project-content">\s*<h3>.*?<\/h3>\s*<p>.*?<\/p>\s*<div class="project-video">.*?<\/div>\s*(?!<div class="project-stats">)/gs;
          html = html.replace(brokenCardPattern, (match) => {
            if (!match.includes('</div>\n        </div>')) {
              return match + '\n            <div class="project-stats">\n              <span>‚≠ê 0</span>\n              <span>üìÖ Unknown</span>\n            </div>\n          </div>\n        </div>';
            }
            return match;
          });
          
          // Ensure project-cards div is properly closed
          const projectCardsMatch = html.match(/<div class="project-cards">([\s\S]*?)(<\/div>\s*<\/section>)/);
          if (projectCardsMatch) {
            const [fullMatch, content, ending] = projectCardsMatch;
            // Count opening and closing project-card divs
            const openingCards = (content.match(/<div class="project-card">/g) || []).length;
            const closingCards = (content.match(/<\/div>\s*<\/div>/g) || []).length;
            
            if (openingCards > closingCards) {
              console.log('Found ' + (openingCards - closingCards) + ' unclosed project cards, fixing...');
              const missingClosings = '\n        </div>'.repeat(openingCards - closingCards);
              html = html.replace(projectCardsMatch[0], 
                '<div class="project-cards">' + content + missingClosings + '\n            </div>' + ending);
            }
          }
          
          console.log('HTML cleanup completed');
        }

        function insertNewProjects(newProjectCards) {
          console.log('Inserting ' + newProjectCards.split('<div class="project-card">').length - 1 + ' new projects...');
          
          // Clean up any malformed HTML first
          cleanUpMalformedHTML();
          
          // Find the project-cards container
          const projectCardsPattern = /(<div class="project-cards">)([\s\S]*?)(\n\s*<\/div>\s*<\/section>)/;
          const match = html.match(projectCardsPattern);
          
          if (match) {
            const [fullMatch, opening, existingContent, closing] = match;
            
            // Insert new projects at the beginning (after opening tag)
            const updatedContent = opening + '\n' + newProjectCards + existingContent + closing;
            html = html.replace(fullMatch, updatedContent);
            
            console.log('New projects inserted successfully');
            return true;
          }
          
          console.error('Could not find project-cards container');
          return false;
        }

        async function main() {
          try {
            const driveVideos = await fetchDriveVideos();
            const existingProjects = getExistingProjects();

            // Filter repositories more strictly
            const validRepos = GITHUB_REPOS.filter(repo => {
              const repoName = repo.name.toLowerCase();
              return !repo.fork && 
                     !repo.private && 
                     repo.description && 
                     repo.description.trim().length > 10 &&
                     !repo.name.includes('.github.io') &&
                     !repoName.includes('config') &&
                     !repoName.includes('readme') &&
                     !repoName.includes('dotfiles') &&
                     repoName !== 'harishkavindauoj';
            });

            const newRepos = validRepos
              .filter(repo => !existingProjects.has(repo.name))
              .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
              .slice(0, 5); // Limit to 5 new projects at a time

            console.log('Repository analysis:');
            console.log('  - Total repos fetched: ' + GITHUB_REPOS.length);
            console.log('  - Valid repos: ' + validRepos.length);
            console.log('  - Already in portfolio: ' + existingProjects.size);
            console.log('  - New repos to add: ' + newRepos.length);

            if (newRepos.length === 0) {
              console.log('No new projects to add. Portfolio is up to date!');
              
              // Still update the timestamp
              const now = new Date().toLocaleString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Asia/Colombo',
                timeZoneName: 'short'
              });

              const metadataHtml = '<div class="portfolio-metadata">Last updated: <span class="last-updated">' + now + '</span></div>';
              if (html.includes('portfolio-metadata')) {
                html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
              } else {
                html = html.replace(/(<footer)/, metadataHtml + '\n\n    $1');
              }

              fs.writeFileSync('index.html', html);
              return;
            }

            console.log('Adding ' + newRepos.length + ' new repositories');

            let newProjectCards = '';
            for (const repo of newRepos) {
              const name = formatRepoName(repo.name);
              const description = repo.description.trim();
              const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });

              console.log('Processing repo: "' + repo.name + '"');

              const matchedVideo = findMatchingVideo(repo.name, driveVideos);

              let videoEmbed = '';
              if (matchedVideo && matchedVideo.id) {
                const embedUrl = getVideoEmbedUrl(matchedVideo.id);
                console.log('Adding Google Drive embed for "' + repo.name + '"');
                
                videoEmbed = '\n              <div class="video-container">\n' +
                           '                <iframe width="100%" height="200" \n' +
                           '                  src="' + embedUrl + '" \n' +
                           '                  frameborder="0" \n' +
                           '                  allow="autoplay; encrypted-media" \n' +
                           '                  allowfullscreen \n' +
                           '                  style="border-radius: 8px; margin: 10px 0;">\n' +
                           '                </iframe>\n' +
                           '                <div class="video-info" style="font-size: 12px; color: #888; margin-top: 5px;">\n' +
                           '                  üìπ ' + matchedVideo.name + '\n' +
                           '                </div>\n' +
                           '              </div>';
              } else {
                console.log('No video found for "' + repo.name + '", showing placeholder');
                videoEmbed = '\n              <div class="video-placeholder" style="width: 100%; height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 8px; margin: 10px 0; display: flex; align-items: center; justify-content: center; color: #666;">\n' +
                           '                <div style="text-align: center;">\n' +
                           '                  <div style="font-size: 48px; margin-bottom: 10px;">üé¨</div>\n' +
                           '                  <div>Demo video coming soon</div>\n' +
                           '                  <div style="font-size: 10px; margin-top: 5px;">Looking for: ' + repo.name + '</div>\n' +
                           '                </div>\n' +
                           '              </div>';
              }

              newProjectCards += '        <div class="project-card">\n' +
                                '          <div class="project-content">\n' +
                                '            <h3><a href="' + repo.html_url + '" target="_blank" style="color: #ffd700; text-decoration: none;">' + name + '</a></h3>\n' +
                                '            <p>' + description + '</p>\n' +
                                '            <div class="project-video">' + videoEmbed + '\n            </div>\n' +
                                '            <div class="project-stats">\n' +
                                '              <span>‚≠ê ' + repo.stargazers_count + '</span>\n' +
                                '              <span>üìÖ ' + date + '</span>\n' +
                                (repo.language ? '              <span>üíª ' + repo.language + '</span>\n' : '') +
                                '            </div>\n' +
                                '          </div>\n' +
                                '        </div>\n';
            }

            if (!insertNewProjects(newProjectCards)) {
              console.error('Failed to insert new projects into HTML');
              console.log('Continuing without adding new projects...');
            }

            // Update timestamp
            const now = new Date().toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Colombo',
              timeZoneName: 'short'
            });

            const metadataHtml = '<div class="portfolio-metadata">Last updated: <span class="last-updated">' + now + '</span></div>';
            if (html.includes('portfolio-metadata')) {
              html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
            } else {
              html = html.replace(/(<footer)/, metadataHtml + '\n\n    $1');
            }

            fs.writeFileSync('index.html', html);
            console.log('Portfolio updated successfully! Processed ' + newRepos.length + ' project(s).');
            
          } catch (error) {
            console.error('Error updating portfolio:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        }

        main();
        SCRIPT_END

    - name: Run update script
      env:
        GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        node update.js
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "ü§ñ Auto-update portfolio with latest projects"
        git push
