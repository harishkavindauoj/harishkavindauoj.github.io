name: Update Portfolio (Debug Version)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update portfolio
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json
        
        cat > update.js << 'EOF'
        const fs = require('fs');
        const https = require('https');

        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.GOOGLE_DRIVE_API_KEY;
        const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;

        let html = fs.readFileSync('index.html', 'utf8');

        function fetchDriveVideos() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('Google Drive API credentials missing, skipping video fetch');
            return Promise.resolve([]);
          }

          const url = `https://www.googleapis.com/drive/v3/files?key=${API_KEY}&q='${FOLDER_ID}'+in+parents+and+(mimeType+contains+'video'+or+name+contains+'.mp4'+or+name+contains+'.avi'+or+name+contains+'.mov'+or+name+contains+'.mkv')&fields=files(id,name,webViewLink,webContentLink,thumbnailLink,videoMediaMetadata,mimeType)&pageSize=100`;
          
          return new Promise((resolve, reject) => {
            console.log('🔍 Fetching Google Drive videos...');
            console.log('API URL:', url.replace(API_KEY, 'HIDDEN_KEY'));
            
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  
                  if (json.error) {
                    console.error('❌ Google Drive API Error:', json.error.message);
                    console.error('Error details:', JSON.stringify(json.error, null, 2));
                    resolve([]);
                    return;
                  }
                  
                  const videos = json.files || [];
                  console.log(`✅ Found ${videos.length} videos in Google Drive folder`);
                  
                  // Enhanced debugging: show all video details
                  videos.forEach((video, index) => {
                    console.log(`📹 Video ${index + 1}:`);
                    console.log(`   Name: "${video.name}"`);
                    console.log(`   ID: ${video.id}`);
                    console.log(`   MimeType: ${video.mimeType}`);
                    console.log(`   ---`);
                  });
                  
                  resolve(videos);
                } catch (err) {
                  console.error('❌ Error parsing Google Drive response:', err.message);
                  console.error('Response data:', data.substring(0, 500) + '...');
                  resolve([]);
                }
              });
            }).on('error', err => {
              console.error('❌ Error fetching Google Drive videos:', err.message);
              resolve([]);
            });
          });
        }

        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }

        function findMatchingVideo(repoName, videos) {
          console.log(`🔍 Looking for video matching repo: "${repoName}"`);
          
          // Create multiple search variations
          const searchTerms = [
            repoName.toLowerCase(),                           // exact lowercase
            repoName.replace(/[-_]/g, ' ').toLowerCase(),     // with spaces
            repoName.replace(/[-_]/g, '').toLowerCase(),      // no separators
            repoName.replace(/[-_]/g, '-').toLowerCase(),     // with dashes
            repoName.replace(/[-_]/g, '_').toLowerCase(),     // with underscores
            repoName.split(/[-_]/).join(' ').toLowerCase(),   // words separated by spaces
            repoName.split(/[-_]/).join('').toLowerCase(),    // concatenated words
          ];
          
          console.log(`   Search terms: [${searchTerms.map(t => `"${t}"`).join(', ')}]`);
          
          for (const term of searchTerms) {
            console.log(`   Trying term: "${term}"`);
            
            const match = videos.find(video => {
              const fileName = (video.name || '').toLowerCase();
              const fileNameNoExt = fileName.replace(/\.(mp4|avi|mov|mkv|webm)$/i, '');
              
              // Multiple matching strategies
              const matches = [
                fileName.includes(term),                      // direct inclusion
                fileNameNoExt.includes(term),                // without extension
                fileName.replace(/[-_\s]/g, '').includes(term.replace(/[-_\s]/g, '')), // normalized
                term.includes(fileNameNoExt),                // reverse check
                fileNameNoExt.includes(term.split(' ')[0]),  // first word match
              ];
              
              const isMatch = matches.some(Boolean);
              if (isMatch) {
                console.log(`     ✅ Match found with "${fileName}" using strategy: ${matches.findIndex(Boolean)}`);
              }
              
              return isMatch;
            });
            
            if (match) {
              console.log(`🎯 Found matching video for "${repoName}": "${match.name}"`);
              return match;
            }
          }
          
          console.log(`❌ No matching video found for "${repoName}"`);
          console.log(`   Available videos: [${videos.map(v => `"${v.name}"`).join(', ')}]`);
          return null;
        }

        function getVideoEmbedUrl(fileId) {
          return `https://drive.google.com/file/d/${fileId}/preview`;
        }

        function testDriveAccess() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('⚠️  Missing Google Drive credentials');
            return;
          }
          
          console.log('🔧 Testing Google Drive access...');
          console.log('   API Key length:', API_KEY.length);
          console.log('   Folder ID:', FOLDER_ID);
          
          // Test basic API access
          const testUrl = `https://www.googleapis.com/drive/v3/files/${FOLDER_ID}?key=${API_KEY}&fields=id,name,mimeType`;
          
          return new Promise((resolve) => {
            https.get(testUrl, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  if (json.error) {
                    console.log('❌ Folder access test failed:', json.error.message);
                  } else {
                    console.log('✅ Folder access test passed:', json.name || 'Unnamed folder');
                  }
                } catch (err) {
                  console.log('❌ Folder access test error:', err.message);
                }
                resolve();
              });
            }).on('error', err => {
              console.log('❌ Network error during folder test:', err.message);
              resolve();
            });
          });
        }

        (async () => {
          try {
            // Test Drive access first
            await testDriveAccess();
            
            const driveVideos = await fetchDriveVideos();

            const repos = GITHUB_REPOS
              .filter(repo => !repo.fork && !repo.private && repo.description && repo.description.length > 10 &&
                              !repo.name.includes('.github.io') &&
                              !repo.name.toLowerCase().includes('config') &&
                              !repo.name.toLowerCase().includes('readme'))
              .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
              .slice(0, 5);

            console.log(`\n📊 Processing ${repos.length} repositories:`);
            repos.forEach((repo, i) => console.log(`   ${i+1}. ${repo.name}`));

            let projectCards = '';
            for (const repo of repos) {
              const name = formatRepoName(repo.name);
              const description = repo.description;
              const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });

              console.log(`\n🔄 Processing repo: "${repo.name}" (${repo.stargazers_count} stars)`);

              const matchedVideo = findMatchingVideo(repo.name, driveVideos);

              let videoEmbed = '';
              if (matchedVideo && matchedVideo.id) {
                const embedUrl = getVideoEmbedUrl(matchedVideo.id);
                console.log(`✅ Adding Google Drive embed for "${repo.name}"`);
                console.log(`   Video: "${matchedVideo.name}"`);
                console.log(`   Embed URL: ${embedUrl}`);
                
                videoEmbed = `
                  <div class="video-container">
                    <iframe width="100%" height="200" 
                      src="${embedUrl}" 
                      frameborder="0" 
                      allow="autoplay; encrypted-media" 
                      allowfullscreen 
                      style="border-radius: 8px; margin: 10px 0;">
                    </iframe>
                    <div class="video-info" style="font-size: 12px; color: #888; margin-top: 5px;">
                      📹 ${matchedVideo.name}
                    </div>
                  </div>`;
              } else {
                console.log(`❌ No video found for "${repo.name}", showing placeholder`);
                videoEmbed = `
                  <div class="video-placeholder" style="width: 100%; height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 8px; margin: 10px 0; display: flex; align-items: center; justify-content: center; color: #666;">
                    <div style="text-align: center;">
                      <div style="font-size: 48px; margin-bottom: 10px;">🎬</div>
                      <div>Demo video coming soon</div>
                      <div style="font-size: 10px; margin-top: 5px;">Looking for: ${repo.name}</div>
                    </div>
                  </div>`;
              }

              projectCards += `
                <div class="project-card">
                  <div class="project-content">
                    <h3><a href="${repo.html_url}" target="_blank" style="color: #ffd700; text-decoration: none;">${name}</a></h3>
                    <p>${description}</p>
                    <div class="project-video">${videoEmbed}</div>
                    <div class="project-stats">
                      <span>⭐ ${repo.stargazers_count}</span>
                      <span>📅 ${date}</span>
                      ${repo.language ? `<span>💻 ${repo.language}</span>` : ''}
                    </div>
                  </div>
                </div>`;
            }

            projectCards += `
                <div class="project-card">
                  <div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">
                    <h3><a href="https://github.com/harishkavindauoj?tab=repositories" target="_blank" style="font-size: 4rem; color: #ffd700; text-decoration: none;">See More..</a></h3>
                  </div>
                </div>`;

            const regex = /<div class="project-cards">[\s\S]*?<\/div>/;
            const replacement = `<div class="project-cards">${projectCards}</div>`;
            html = html.replace(regex, replacement);

            const now = new Date().toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Colombo',
              timeZoneName: 'short'
            });

            const metadataHtml = `<div class="portfolio-metadata">Last updated: <span class="last-updated">${now}</span></div>`;
            if (html.includes('portfolio-metadata')) {
              html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
            } else {
              html = html.replace(/(<footer)/, `${metadataHtml}\n\n    $1`);
            }

            fs.writeFileSync('index.html', html);
            console.log('\n🎉 Portfolio updated successfully!');
            
          } catch (error) {
            console.error('💥 Error updating portfolio:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        })();
        EOF

        node update.js
        
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "🤖 Auto-update portfolio with latest projects (with video debug)"
        git push
