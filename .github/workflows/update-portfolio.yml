name: Update Portfolio (Queue - Latest 5 Projects)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Fetch GitHub repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json

    - name: Create update script
      run: |
        cat > update.js << 'SCRIPT_END'
        const fs = require('fs');
        const https = require('https');
        
        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.GOOGLE_DRIVE_API_KEY;
        const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;
        const MAX_PROJECTS = 5; // Total number of projects to maintain in portfolio
        
        let html = fs.readFileSync('index.html', 'utf8');
        
        function fetchDriveVideos() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('Google Drive API credentials missing, skipping video fetch');
            return Promise.resolve([]);
          }
        
          const url = 'https://www.googleapis.com/drive/v3/files?key=' + API_KEY + 
                     '&q=\'' + FOLDER_ID + '\'+in+parents+and+(mimeType+contains+\'video\'+or+name+contains+\'.mp4\'+or+name+contains+\'.avi\'+or+name+contains+\'.mov\'+or+name+contains+\'.mkv\')&fields=files(id,name,webViewLink,webContentLink,thumbnailLink,videoMediaMetadata,mimeType)&pageSize=100';
          
          return new Promise((resolve, reject) => {
            console.log('Fetching Google Drive videos...');
            
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  
                  if (json.error) {
                    console.error('Google Drive API Error:', json.error.message);
                    resolve([]);
                    return;
                  }
                  
                  const videos = json.files || [];
                  console.log('Found ' + videos.length + ' videos in Google Drive folder');
                  resolve(videos);
                } catch (err) {
                  console.error('Error parsing Google Drive response:', err.message);
                  resolve([]);
                }
              });
            }).on('error', err => {
              console.error('Error fetching Google Drive videos:', err.message);
              resolve([]);
            });
          });
        }
        
        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }
        
        function findMatchingVideo(repoName, videos) {
          console.log('Looking for video matching repo: "' + repoName + '"');
          
          const searchTerms = [
            repoName.toLowerCase(),
            repoName.replace(/[-_]/g, ' ').toLowerCase(),
            repoName.replace(/[-_]/g, '').toLowerCase(),
            repoName.replace(/[-_]/g, '-').toLowerCase(),
            repoName.replace(/[-_]/g, '_').toLowerCase(),
          ];
          
          for (const term of searchTerms) {
            const match = videos.find(video => {
              const fileName = (video.name || '').toLowerCase();
              const fileNameNoExt = fileName.replace(/\.(mp4|avi|mov|mkv|webm)$/i, '');
              
              return fileName.includes(term) || 
                     fileNameNoExt.includes(term) || 
                     fileName.replace(/[-_\s]/g, '').includes(term.replace(/[-_\s]/g, ''));
            });
            
            if (match) {
              console.log('Found matching video for "' + repoName + '": "' + match.name + '"');
              return match;
            }
          }
          
          console.log('No matching video found for "' + repoName + '"');
          return null;
        }
        
        function getVideoEmbedUrl(fileId) {
          return 'https://drive.google.com/file/d/' + fileId + '/preview';
        }
        
        function getCurrentProjectsFromPortfolio() {
          const projects = [];
          const githubUrlRegex = /href="https:\/\/github\.com\/harishkavindauoj\/([^"/?#]+)"/g;
          let match;
          
          while ((match = githubUrlRegex.exec(html)) !== null) {
            const repoName = match[1];
            if (repoName !== 'harishkavindauoj' && !repoName.includes('.github.io')) {
              // Try to find this repo in our GitHub data to get update date
              const repoData = GITHUB_REPOS.find(r => r.name === repoName);
              if (repoData) {
                projects.push({
                  name: repoName,
                  updatedAt: new Date(repoData.updated_at),
                  data: repoData
                });
              }
            }
          }
          
          // Sort by update date (newest first) to maintain order
          projects.sort((a, b) => b.updatedAt - a.updatedAt);
          
          console.log('Current projects in portfolio (' + projects.length + '):');
          projects.forEach((p, i) => {
            console.log('  ' + (i+1) + '. ' + p.name + ' (updated: ' + p.updatedAt.toDateString() + ')');
          });
          
          return projects;
        }
        
        function getLatestQualifyingRepos() {
          return GITHUB_REPOS
            .filter(repo => {
              const repoName = repo.name.toLowerCase();
              return !repo.fork && 
                     !repo.private && 
                     repo.description && 
                     repo.description.length > 10 &&
                     !repo.name.includes('.github.io') &&
                     !repoName.includes('config') &&
                     !repoName.includes('readme') &&
                     repoName !== 'harishkavindauoj';
            })
            .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
            .slice(0, MAX_PROJECTS); // Only keep top 5 latest
        }
        
        function generateProjectsHtml(repos, driveVideos) {
          let projectCards = '';
          
          for (const repo of repos) {
            const name = formatRepoName(repo.name);
            const description = repo.description;
            const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });
      
            console.log('üîÑ Generating HTML for: "' + repo.name + '"');
      
            const matchedVideo = findMatchingVideo(repo.name, driveVideos);
      
            let videoEmbed = '';
            if (matchedVideo && matchedVideo.id) {
              const embedUrl = getVideoEmbedUrl(matchedVideo.id);
              console.log('üé¨ Adding Google Drive embed for "' + repo.name + '"');
              
              videoEmbed = '\n          <div class="video-container">\n' +
                         '            <iframe width="100%" height="200" \n' +
                         '              src="' + embedUrl + '" \n' +
                         '              frameborder="0" \n' +
                         '              allow="autoplay; encrypted-media" \n' +
                         '              allowfullscreen \n' +
                         '              style="border-radius: 8px; margin: 10px 0;">\n' +
                         '            </iframe>\n' +
                         '            <div class="video-info" style="font-size: 12px; color: #888; margin-top: 5px;">\n' +
                         '              üìπ ' + matchedVideo.name + '\n' +
                         '            </div>\n' +
                         '          </div>';
            } else {
              console.log('üìù No video found for "' + repo.name + '", showing placeholder');
              videoEmbed = '\n          <div class="video-placeholder" style="width: 100%; height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 8px; margin: 10px 0; display: flex; align-items: center; justify-content: center; color: #666;">\n' +
                         '            <div style="text-align: center;">\n' +
                         '              <div style="font-size: 48px; margin-bottom: 10px;">üé¨</div>\n' +
                         '              <div>Demo video coming soon</div>\n' +
                         '              <div style="font-size: 10px; margin-top: 5px;">Looking for: ' + repo.name + '</div>\n' +
                         '            </div>\n' +
                         '          </div>';
            }
      
            projectCards += '        <div class="project-card">\n' +
                              '          <div class="project-content">\n' +
                              '            <h3><a href="' + repo.html_url + '" target="_blank" style="color: #ffd700; text-decoration: none;">' + name + '</a></h3>\n' +
                              '            <p>' + description + '</p>\n' +
                              '            <div class="project-video">' + videoEmbed + '</div>\n' +
                              '            <div class="project-stats">\n' +
                              '              <span>‚≠ê ' + repo.stargazers_count + '</span>\n' +
                              '              <span>üìÖ ' + date + '</span>\n' +
                              (repo.language ? '              <span>üíª ' + repo.language + '</span>\n' : '') +
                              '            </div>\n' +
                              '          </div>\n' +
                              '        </div>\n';
          }
          
          // Always add the "See More.." card at the end
          projectCards += '        <div class="project-card">\n' +
                '          <div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">\n' +
                '            <h3><a href="https://github.com/harishkavindauoj?tab=repositories" target="_blank" style="font-size: 4rem; color: #ffd700; text-decoration: none;">See More..</a></h3>\n' +
                '          </div>\n' +
                '        </div>\n';
          
          return projectCards;
        }
        
        function replacePortfolioProjects(newProjectCards) {
          console.log('Replacing portfolio projects...');
        
          const autoStart = '<!-- AUTO-GENERATED-START -->';
          const autoEnd = '<!-- AUTO-GENERATED-END -->';
        
          const fullBlock = `${autoStart}\n${newProjectCards}\n${autoEnd}`;
        
          const autoPattern = new RegExp(`${autoStart}[\\s\\S]*?${autoEnd}`, 'g');
        
          if (autoPattern.test(html)) {
            console.log('Auto-generated block found. Replacing entire block...');
            html = html.replace(autoPattern, fullBlock);
            return true;
          }
        
          // Fallback: insert right before </div> of .project-cards
          const containerEndPattern = /(<div class="project-cards">[\s\S]*?)(<\/div>)/;
        
          const containerMatch = html.match(containerEndPattern);
        
          if (containerMatch) {
            console.log('No auto block found. Inserting at end of .project-cards...');
            html = html.replace(containerEndPattern, `$1\n${fullBlock}\n$2`);
            return true;
          }
        
          console.error('Failed to locate insertion point.');
          return false;
        }

        
        async function main() {
          try {
            const driveVideos = await fetchDriveVideos();
            const currentProjects = getCurrentProjectsFromPortfolio();
            const latestRepos = getLatestQualifyingRepos();
            
            console.log('\n=== QUEUE ANALYSIS ===');
            console.log('Total qualifying repos: ' + GITHUB_REPOS.filter(r => !r.fork && !r.private && r.description && r.description.length > 10).length);
            console.log('Current projects in portfolio: ' + currentProjects.length);
            console.log('Latest ' + MAX_PROJECTS + ' qualifying projects:');
            
            latestRepos.forEach((repo, i) => {
              const isInPortfolio = currentProjects.some(p => p.name === repo.name);
              const status = isInPortfolio ? '‚úÖ (already in portfolio)' : 'üÜï (new)';
              console.log('  ' + (i+1) + '. ' + repo.name + ' ' + status);
            });
            
            // Check if there are any differences
            const currentProjectNames = new Set(currentProjects.map(p => p.name));
            const latestProjectNames = new Set(latestRepos.map(r => r.name));
            
            const projectsToAdd = latestRepos.filter(r => !currentProjectNames.has(r.name));
            const projectsToRemove = currentProjects.filter(p => !latestProjectNames.has(p.name));
            
            console.log('\n=== QUEUE CHANGES ===');
            if (projectsToAdd.length > 0) {
              console.log('üÜï Projects to ADD: ' + projectsToAdd.map(r => r.name).join(', '));
            }
            if (projectsToRemove.length > 0) {
              console.log('üóëÔ∏è  Projects to REMOVE: ' + projectsToRemove.map(p => p.name).join(', '));
            }
            
            if (projectsToAdd.length === 0 && projectsToRemove.length === 0) {
              console.log('‚ú® No changes needed. Portfolio queue is up to date!');
              return;
            }
            
            console.log('\n=== UPDATING PORTFOLIO QUEUE ===');
            console.log('Maintaining latest ' + MAX_PROJECTS + ' projects in chronological order...');
            
            // Generate HTML for the latest 5 projects
            const newProjectCards = generateProjectsHtml(latestRepos, driveVideos);
            
            if (!replacePortfolioProjects(newProjectCards)) {
              console.error('‚ùå Failed to replace projects in HTML');
              return;
            }
        
            // Update timestamp
            const now = new Date().toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Colombo',
              timeZoneName: 'short'
            });
        
            const metadataHtml = '<div class="portfolio-metadata">Last updated: <span class="last-updated">' + now + '</span> | Showing latest ' + MAX_PROJECTS + ' projects</div>';
            if (html.includes('portfolio-metadata')) {
              html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
            } else {
              html = html.replace(/(<footer)/, metadataHtml + '\n\n    $1');
            }
        
            fs.writeFileSync('index.html', html);
            console.log('\n‚úÖ Portfolio queue updated successfully!');
            console.log('üìä Summary: Maintaining ' + latestRepos.length + ' projects in queue');
            console.log('üìà Current queue (newest ‚Üí oldest): ' + latestRepos.map(r => r.name).join(' ‚Üí '));
            
          } catch (error) {
            console.error('‚ùå Error updating portfolio queue:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        }
        
        main();

        SCRIPT_END

    - name: Run update script
      env:
        GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        node update.js
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --global --add safe.directory "$(pwd)"
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "üîÑ Update portfolio queue with latest 5 projects"
        git push
