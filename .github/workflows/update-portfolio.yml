name: Update Portfolio (Debug Version)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update portfolio
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json
        
        cat > update.js << 'EOF'
        const fs = require('fs');
        const https = require('https');

        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.GOOGLE_DRIVE_API_KEY;
        const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;

        let html = fs.readFileSync('index.html', 'utf8');

        function fetchDriveVideos() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('Google Drive API credentials missing, skipping video fetch');
            return Promise.resolve([]);
          }

          const url = `https://www.googleapis.com/drive/v3/files?key=${API_KEY}&q='${FOLDER_ID}'+in+parents+and+(mimeType+contains+'video'+or+name+contains+'.mp4'+or+name+contains+'.avi'+or+name+contains+'.mov'+or+name+contains+'.mkv')&fields=files(id,name,webViewLink,webContentLink,thumbnailLink,videoMediaMetadata,mimeType)&pageSize=100`;
          
          return new Promise((resolve, reject) => {
            console.log('üîç Fetching Google Drive videos...');
            console.log('API URL:', url.replace(API_KEY, 'HIDDEN_KEY'));
            
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  
                  if (json.error) {
                    console.error('‚ùå Google Drive API Error:', json.error.message);
                    console.error('Error details:', JSON.stringify(json.error, null, 2));
                    resolve([]);
                    return;
                  }
                  
                  const videos = json.files || [];
                  console.log(`‚úÖ Found ${videos.length} videos in Google Drive folder`);
                  
                  // Enhanced debugging: show all video details
                  videos.forEach((video, index) => {
                    console.log(`üìπ Video ${index + 1}:`);
                    console.log(`   Name: "${video.name}"`);
                    console.log(`   ID: ${video.id}`);
                    console.log(`   MimeType: ${video.mimeType}`);
                    console.log(`   ---`);
                  });
                  
                  resolve(videos);
                } catch (err) {
                  console.error('‚ùå Error parsing Google Drive response:', err.message);
                  console.error('Response data:', data.substring(0, 500) + '...');
                  resolve([]);
                }
              });
            }).on('error', err => {
              console.error('‚ùå Error fetching Google Drive videos:', err.message);
              resolve([]);
            });
          });
        }

        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }

        function findMatchingVideo(repoName, videos) {
          console.log(`üîç Looking for video matching repo: "${repoName}"`);
          
          // Create multiple search variations
          const searchTerms = [
            repoName.toLowerCase(),                           // exact lowercase
            repoName.replace(/[-_]/g, ' ').toLowerCase(),     // with spaces
            repoName.replace(/[-_]/g, '').toLowerCase(),      // no separators
            repoName.replace(/[-_]/g, '-').toLowerCase(),     // with dashes
            repoName.replace(/[-_]/g, '_').toLowerCase(),     // with underscores
            repoName.split(/[-_]/).join(' ').toLowerCase(),   // words separated by spaces
            repoName.split(/[-_]/).join('').toLowerCase(),    // concatenated words
          ];
          
          console.log(`   Search terms: [${searchTerms.map(t => `"${t}"`).join(', ')}]`);
          
          for (const term of searchTerms) {
            console.log(`   Trying term: "${term}"`);
            
            const match = videos.find(video => {
              const fileName = (video.name || '').toLowerCase();
              const fileNameNoExt = fileName.replace(/\.(mp4|avi|mov|mkv|webm)$/i, '');
              
              // Multiple matching strategies
              const matches = [
                fileName.includes(term),                      // direct inclusion
                fileNameNoExt.includes(term),                // without extension
                fileName.replace(/[-_\s]/g, '').includes(term.replace(/[-_\s]/g, '')), // normalized
                term.includes(fileNameNoExt),                // reverse check
                fileNameNoExt.includes(term.split(' ')[0]),  // first word match
              ];
              
              const isMatch = matches.some(Boolean);
              if (isMatch) {
                console.log(`     ‚úÖ Match found with "${fileName}" using strategy: ${matches.findIndex(Boolean)}`);
              }
              
              return isMatch;
            });
            
            if (match) {
              console.log(`üéØ Found matching video for "${repoName}": "${match.name}"`);
              return match;
            }
          }
          
          console.log(`‚ùå No matching video found for "${repoName}"`);
          console.log(`   Available videos: [${videos.map(v => `"${v.name}"`).join(', ')}]`);
          return null;
        }

        function getVideoEmbedUrl(fileId) {
          return `https://drive.google.com/file/d/${fileId}/preview`;
        }

        function testDriveAccess() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('‚ö†Ô∏è  Missing Google Drive credentials');
            return;
          }
          
          console.log('üîß Testing Google Drive access...');
          console.log('   API Key length:', API_KEY.length);
          console.log('   Folder ID:', FOLDER_ID);
          
          // Test basic API access
          const testUrl = `https://www.googleapis.com/drive/v3/files/${FOLDER_ID}?key=${API_KEY}&fields=id,name,mimeType`;
          
          return new Promise((resolve) => {
            https.get(testUrl, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  if (json.error) {
                    console.log('‚ùå Folder access test failed:', json.error.message);
                  } else {
                    console.log('‚úÖ Folder access test passed:', json.name || 'Unnamed folder');
                  }
                } catch (err) {
                  console.log('‚ùå Folder access test error:', err.message);
                }
                resolve();
              });
            }).on('error', err => {
              console.log('‚ùå Network error during folder test:', err.message);
              resolve();
            });
          });
        }

        function getExistingProjects() {
          // Extract existing project URLs from the HTML to identify already added projects
          const existingRepos = new Set();
          
          // Multiple patterns to catch different URL formats
          const patterns = [
            /<a href="https:\/\/github\.com\/harishkavindauoj\/([^"/?#]+)/g,
            /github\.com\/harishkavindauoj\/([^"/?#\s]+)/g,
            /href="https:\/\/github\.com\/harishkavindauoj\/([^"/?#]+)/g
          ];
          
          patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(html)) !== null) {
              if (match[1] && match[1] !== 'harishkavindauoj' && !match[1].includes('.github.io')) {
                existingRepos.add(match[1]);
              }
            }
          });
          
          console.log(`üìã Found ${existingRepos.size} existing projects in portfolio:`);
          if (existingRepos.size > 0) {
            existingRepos.forEach(repo => console.log(`   - ${repo}`));
          } else {
            console.log('   (No existing projects found - this might be the first run)');
            
            // Debug: Show a sample of the HTML to help diagnose
            const sampleHtml = html.substring(0, 1000);
            console.log('üîç HTML sample for debugging:');
            console.log(sampleHtml.replace(/\s+/g, ' '));
          }
          
          return existingRepos;
        }

        function insertNewProjects(newProjectCards) {
          console.log('üîß Fixing corrupted HTML structure...');
          
          // Find the project-cards container - use a more robust regex
          const projectCardsMatch = html.match(/<div class="project-cards">([\s\S]*?)<\/div>\s*<\/div>\s*<\/section>/);
          if (!projectCardsMatch) {
            console.error('‚ùå Could not find project-cards container in HTML');
            return false;
          }
          
          let existingContent = projectCardsMatch[1];
          console.log('üìù Original content length:', existingContent.length);
          
          // Clean up the corrupted structure
          // Remove duplicate closing tags and malformed content
          existingContent = existingContent
            .replace(/\s*<\/div>\s*<\/div>\s*<div class="project-stats">[\s\S]*?<\/div>\s*<\/div>\s*<\/div>/g, '') // Remove orphaned stats
            .replace(/\s*<\/div>\s*<\/div>\s*<\/div>\s*<\/section>/g, '') // Remove extra closing tags
            .replace(/\s*<\/div>\s*<\/div>\s*<\/div>$/g, '') // Remove trailing extra divs
            .trim();
          
          console.log('üßπ After cleanup content length:', existingContent.length);
          
          // Extract all existing project cards properly
          const existingProjectCards = [];
          const projectCardRegex = /<div class="project-card">\s*<div class="project-content">[\s\S]*?(?=<div class="project-card"|$)/g;
          let match;
          
          while ((match = projectCardRegex.exec(existingContent)) !== null) {
            const cardContent = match[0];
            
            // Skip if it's a "See More.." card
            if (!cardContent.includes('See More..')) {
              // Ensure the card is properly closed
              let properCard = cardContent;
              if (!properCard.includes('</div>\n        </div>')) {
                properCard = properCard.replace(/(<div class="project-stats">[\s\S]*?<\/div>)\s*$/, '$1\n          </div>\n        </div>');
              }
              existingProjectCards.push(properCard);
            }
          }
          
          console.log(`üîç Found ${existingProjectCards.length} existing project cards`);
          
          // Create the complete new content
          const allProjectCards = existingProjectCards.join('\n        ') + '\n        ' + newProjectCards.trim();
          
          // Add the "See More.." card at the end
          const seeMoreCard = `
        <div class="project-card">
          <div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">
            <h3><a href="https://github.com/harishkavindauoj?tab=repositories" target="_blank" style="font-size: 4rem; color: #ffd700; text-decoration: none;">See More..</a></h3>
          </div>
        </div>`;
          
          const finalContent = allProjectCards + seeMoreCard;
          
          // Replace the entire project-cards section with clean content
          const newProjectCardsHtml = `<div class="project-cards">${finalContent}</div>`;
          
          // Use a more precise replacement that handles the closing tags
          html = html.replace(
            /<div class="project-cards">[\s\S]*?<\/div>\s*<\/div>\s*<\/section>/,
            `${newProjectCardsHtml}
          </div>
        </section>`
          );
          
          console.log('‚úÖ HTML structure fixed and new projects inserted');
          return true;
        }

        (async () => {
          try {
            // Test Drive access first
            await testDriveAccess();
            
            const driveVideos = await fetchDriveVideos();
            const existingProjects = getExistingProjects();

            // Filter repos to exclude already added ones and special projects
            const allRepos = GITHUB_REPOS
              .filter(repo => {
                const repoName = repo.name.toLowerCase();
                return !repo.fork && 
                       !repo.private && 
                       repo.description && 
                       repo.description.length > 10 &&
                       !repo.name.includes('.github.io') &&
                       !repoName.includes('config') &&
                       !repoName.includes('readme') &&
                       repoName !== 'harishkavindauoj' && // Ignore username repo
                       !existingProjects.has(repo.name); // Only new repos
              })
              .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));

            console.log(`\nüìä Repository analysis:`);
            console.log(`   - Total repos fetched: ${GITHUB_REPOS.length}`);
            console.log(`   - After basic filtering: ${GITHUB_REPOS.filter(repo => {
              const repoName = repo.name.toLowerCase();
              return !repo.fork && 
                     !repo.private && 
                     repo.description && 
                     repo.description.length > 10 &&
                     !repo.name.includes('.github.io') &&
                     !repoName.includes('config') &&
                     !repoName.includes('readme') &&
                     repoName !== 'harishkavindauoj';
            }).length}`);
            console.log(`   - Already in portfolio: ${existingProjects.size}`);
            console.log(`   - New repos to potentially add: ${allRepos.length}`);

            if (allRepos.length === 0) {
              console.log('‚úÖ No new projects to add. Portfolio is up to date!');
              
              // Show what repos were filtered out and why
              const filteredRepos = GITHUB_REPOS.filter(repo => {
                const repoName = repo.name.toLowerCase();
                return !repo.fork && 
                       !repo.private && 
                       repo.description && 
                       repo.description.length > 10 &&
                       !repo.name.includes('.github.io') &&
                       !repoName.includes('config') &&
                       !repoName.includes('readme') &&
                       repoName !== 'harishkavindauoj';
              });
              
              console.log('\nüîç All eligible repos (showing why they were skipped):');
              filteredRepos.forEach(repo => {
                const inPortfolio = existingProjects.has(repo.name);
                console.log(`   - ${repo.name}: ${inPortfolio ? '‚ùå Already in portfolio' : '‚úÖ Eligible but not selected'}`);
              });
              
              return;
            }

            // Limit to max 3 new projects per run to avoid overwhelming the portfolio
            const newRepos = allRepos.slice(0, 3);

            console.log(`\nüìä Found ${allRepos.length} new repositories, adding ${newRepos.length}:`);
            newRepos.forEach((repo, i) => console.log(`   ${i+1}. ${repo.name} (new)`));

            let newProjectCards = '';
            for (const repo of newRepos) {
              const name = formatRepoName(repo.name);
              const description = repo.description;
              const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });

              console.log(`\nüîÑ Processing new repo: "${repo.name}" (${repo.stargazers_count} stars)`);

              const matchedVideo = findMatchingVideo(repo.name, driveVideos);

              let videoEmbed = '';
              if (matchedVideo && matchedVideo.id) {
                const embedUrl = getVideoEmbedUrl(matchedVideo.id);
                console.log(`‚úÖ Adding Google Drive embed for "${repo.name}"`);
                console.log(`   Video: "${matchedVideo.name}"`);
                console.log(`   Embed URL: ${embedUrl}`);
                
                videoEmbed = `
                  <div class="video-container">
                    <iframe width="100%" height="200" 
                      src="${embedUrl}" 
                      frameborder="0" 
                      allow="autoplay; encrypted-media" 
                      allowfullscreen 
                      style="border-radius: 8px; margin: 10px 0;">
                    </iframe>
                    <div class="video-info" style="font-size: 12px; color: #888; margin-top: 5px;">
                      üìπ ${matchedVideo.name}
                    </div>
                  </div>`;
              } else {
                console.log(`‚ùå No video found for "${repo.name}", showing placeholder`);
                videoEmbed = `
                  <div class="video-placeholder" style="width: 100%; height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 8px; margin: 10px 0; display: flex; align-items: center; justify-content: center; color: #666;">
                    <div style="text-align: center;">
                      <div style="font-size: 48px; margin-bottom: 10px;">üé¨</div>
                      <div>Demo video coming soon</div>
                      <div style="font-size: 10px; margin-top: 5px;">Looking for: ${repo.name}</div>
                    </div>
                  </div>`;
              }

              newProjectCards += `
                <div class="project-card">
                  <div class="project-content">
                    <h3><a href="${repo.html_url}" target="_blank" style="color: #ffd700; text-decoration: none;">${name}</a></h3>
                    <p>${description}</p>
                    <div class="project-video">${videoEmbed}</div>
                    <div class="project-stats">
                      <span>‚≠ê ${repo.stargazers_count}</span>
                      <span>üìÖ ${date}</span>
                      ${repo.language ? `<span>üíª ${repo.language}</span>` : ''}
                    </div>
                  </div>
                </div>`;
            }

            // Insert new projects into existing HTML structure
            if (newProjectCards && !insertNewProjects(newProjectCards)) {
              console.error('‚ùå Failed to insert new projects into HTML');
              return;
            }

            // Update the metadata timestamp
            const now = new Date().toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Colombo',
              timeZoneName: 'short'
            });

            const metadataHtml = `<div class="portfolio-metadata">Last updated: <span class="last-updated">${now}</span></div>`;
            if (html.includes('portfolio-metadata')) {
              html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
            } else {
              html = html.replace(/(<footer)/, `${metadataHtml}\n\n    $1`);
            }

            fs.writeFileSync('index.html', html);
            console.log(`\nüéâ Portfolio updated successfully! Added ${newRepos.length} new project(s).`);
            
          } catch (error) {
            console.error('üí• Error updating portfolio:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        })();
        EOF

        node update.js
        
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "ü§ñ Auto-update portfolio with latest projects (with video debug)"
        git push
