name: Update Portfolio (Fixed Version)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Update portfolio
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GOOGLE_DRIVE_API_KEY: ${{ secrets.GOOGLE_DRIVE_API_KEY }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json
        
        cat > update.js << 'EOF'
        const fs = require('fs');
        const https = require('https');

        const GITHUB_REPOS = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        const API_KEY = process.env.GOOGLE_DRIVE_API_KEY;
        const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;

        let html = fs.readFileSync('index.html', 'utf8');

        function fetchDriveVideos() {
          if (!API_KEY || !FOLDER_ID) {
            console.log('Google Drive API credentials missing, skipping video fetch');
            return Promise.resolve([]);
          }

          const url = `https://www.googleapis.com/drive/v3/files?key=${API_KEY}&q='${FOLDER_ID}'+in+parents+and+(mimeType+contains+'video'+or+name+contains+'.mp4'+or+name+contains+'.avi'+or+name+contains+'.mov'+or+name+contains+'.mkv')&fields=files(id,name,webViewLink,webContentLink,thumbnailLink,videoMediaMetadata,mimeType)&pageSize=100`;
          
          return new Promise((resolve, reject) => {
            console.log('üîç Fetching Google Drive videos...');
            
            https.get(url, res => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  const json = JSON.parse(data);
                  
                  if (json.error) {
                    console.error('‚ùå Google Drive API Error:', json.error.message);
                    resolve([]);
                    return;
                  }
                  
                  const videos = json.files || [];
                  console.log(`‚úÖ Found ${videos.length} videos in Google Drive folder`);
                  resolve(videos);
                } catch (err) {
                  console.error('‚ùå Error parsing Google Drive response:', err.message);
                  resolve([]);
                }
              });
            }).on('error', err => {
              console.error('‚ùå Error fetching Google Drive videos:', err.message);
              resolve([]);
            });
          });
        }

        function formatRepoName(name) {
          return name
            .replace(/[-_]/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
        }

        function findMatchingVideo(repoName, videos) {
          console.log(`üîç Looking for video matching repo: "${repoName}"`);
          
          const searchTerms = [
            repoName.toLowerCase(),
            repoName.replace(/[-_]/g, ' ').toLowerCase(),
            repoName.replace(/[-_]/g, '').toLowerCase(),
            repoName.replace(/[-_]/g, '-').toLowerCase(),
            repoName.replace(/[-_]/g, '_').toLowerCase(),
          ];
          
          for (const term of searchTerms) {
            const match = videos.find(video => {
              const fileName = (video.name || '').toLowerCase();
              const fileNameNoExt = fileName.replace(/\.(mp4|avi|mov|mkv|webm)$/i, '');
              
              return fileName.includes(term) || 
                     fileNameNoExt.includes(term) || 
                     fileName.replace(/[-_\s]/g, '').includes(term.replace(/[-_\s]/g, ''));
            });
            
            if (match) {
              console.log(`üéØ Found matching video for "${repoName}": "${match.name}"`);
              return match;
            }
          }
          
          console.log(`‚ùå No matching video found for "${repoName}"`);
          return null;
        }

        function getVideoEmbedUrl(fileId) {
          return `https://drive.google.com/file/d/${fileId}/preview`;
        }

        function getExistingProjects() {
          // Simple and reliable way to extract existing GitHub repo names
          const existingRepos = new Set();
          const githubUrlRegex = /href="https:\/\/github\.com\/harishkavindauoj\/([^"/?#]+)"/g;
          let match;
          
          while ((match = githubUrlRegex.exec(html)) !== null) {
            const repoName = match[1];
            // Skip the profile repo and .github.io repos
            if (repoName !== 'harishkavindauoj' && !repoName.includes('.github.io')) {
              existingRepos.add(repoName);
            }
          }
          
          console.log(`üìã Found ${existingRepos.size} existing projects in portfolio:`);
          existingRepos.forEach(repo => console.log(`   - ${repo}`));
          
          return existingRepos;
        }

        function insertNewProjects(newProjectCards) {
          console.log('üîß Inserting new projects...');
          
          // Find the insertion point - right before the "See More.." card
          // This pattern matches the actual structure in your HTML
          const seeMorePattern = /<div class="project-card">\s*<div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">\s*<h3><a href="https:\/\/github\.com\/harishkavindauoj\?tab=repositories" target="_blank" style="font-size: 4rem; color: #ffd700; text-decoration: none;">See More\.\.<\/a><\/h3>/;
          
          if (!seeMorePattern.test(html)) {
            console.error('‚ùå Could not find "See More.." card insertion point');
            console.log('üîç Searching for alternative patterns...');
            
            // Try a simpler pattern
            const simpleSeeMorePattern = /See More\.\./;
            if (simpleSeeMorePattern.test(html)) {
              console.log('‚úÖ Found "See More.." text, using broader insertion method');
              
              // Find the broader pattern and insert before it
              const broadPattern = /<div class="project-card">[^]*?See More\.\.[^]*?<\/div>\s*<\/div>/;
              if (broadPattern.test(html)) {
                html = html.replace(broadPattern, newProjectCards + '        function insertNewProjects(newProjectCards) {
          console.log('üîß Inserting new projects...');
          
          // Find the insertion point - right before the "See More.." card
          const seeMorePattern = /<div class="project-card">\s*<div class="project-content"[^>]*style="[^"]*display:\s*flex[^"]*"[^>]*>\s*<h3><a href="https:\/\/github\.com\/harishkavindauoj\?tab=repositories"[^>]*>See More\.\.<\/a><\/h3>/;
          
          if (!seeMorePattern.test(html)) {
            console.error('‚ùå Could not find "See More.." card insertion point');
            return false;
          }
          
          // Insert new cards before the "See More.." card
          html = html.replace(seeMorePattern, newProjectCards + '$&');
          
          console.log('‚úÖ New projects inserted successfully');
          return true;
        }');
                console.log('‚úÖ New projects inserted successfully (broad method)');
                return true;
              }
            }
            
            console.error('‚ùå Could not find any suitable insertion point');
            console.log('üîç HTML structure around project cards:');
            
            // Debug: Show the structure around project cards
            const projectSectionMatch = html.match(/<div class="project-cards">([\s\S]*?)<\/div>/);
            if (projectSectionMatch) {
              const cardsContent = projectSectionMatch[1];
              const lines = cardsContent.split('\n');
              console.log('Last 10 lines of project cards:');
              lines.slice(-10).forEach((line, i) => {
                console.log(`${lines.length - 10 + i}: ${line}`);
              });
            }
            
            return false;
          }
          
          // Insert new cards before the "See More.." card
          html = html.replace(seeMorePattern, newProjectCards + '        function insertNewProjects(newProjectCards) {
          console.log('üîß Inserting new projects...');
          
          // Find the insertion point - right before the "See More.." card
          const seeMorePattern = /<div class="project-card">\s*<div class="project-content"[^>]*style="[^"]*display:\s*flex[^"]*"[^>]*>\s*<h3><a href="https:\/\/github\.com\/harishkavindauoj\?tab=repositories"[^>]*>See More\.\.<\/a><\/h3>/;
          
          if (!seeMorePattern.test(html)) {
            console.error('‚ùå Could not find "See More.." card insertion point');
            return false;
          }
          
          // Insert new cards before the "See More.." card
          html = html.replace(seeMorePattern, newProjectCards + '$&');
          
          console.log('‚úÖ New projects inserted successfully');
          return true;
        }');
          
          console.log('‚úÖ New projects inserted successfully');
          return true;
        }

        (async () => {
          try {
            const driveVideos = await fetchDriveVideos();
            const existingProjects = getExistingProjects();

            // Filter repos to exclude already added ones
            const newRepos = GITHUB_REPOS
              .filter(repo => {
                const repoName = repo.name.toLowerCase();
                return !repo.fork && 
                       !repo.private && 
                       repo.description && 
                       repo.description.length > 10 &&
                       !repo.name.includes('.github.io') &&
                       !repoName.includes('config') &&
                       !repoName.includes('readme') &&
                       repoName !== 'harishkavindauoj' &&
                       !existingProjects.has(repo.name); // Only new repos
              })
              .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
              .slice(0, 3); // Limit to 3 new projects per run

            console.log(`\nüìä Repository analysis:`);
            console.log(`   - Total repos fetched: ${GITHUB_REPOS.length}`);
            console.log(`   - Already in portfolio: ${existingProjects.size}`);
            console.log(`   - New repos to add: ${newRepos.length}`);

            if (newRepos.length === 0) {
              console.log('‚úÖ No new projects to add. Portfolio is up to date!');
              return;
            }

            console.log(`\nüìä Adding ${newRepos.length} new repositories:`);
            newRepos.forEach((repo, i) => console.log(`   ${i+1}. ${repo.name}`));

            let newProjectCards = '';
            for (const repo of newRepos) {
              const name = formatRepoName(repo.name);
              const description = repo.description;
              const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });

              console.log(`\nüîÑ Processing repo: "${repo.name}"`);

              const matchedVideo = findMatchingVideo(repo.name, driveVideos);

              let videoEmbed = '';
              if (matchedVideo && matchedVideo.id) {
                const embedUrl = getVideoEmbedUrl(matchedVideo.id);
                console.log(`‚úÖ Adding Google Drive embed for "${repo.name}"`);
                
                videoEmbed = `
          <div class="video-container">
            <iframe width="100%" height="200" 
              src="${embedUrl}" 
              frameborder="0" 
              allow="autoplay; encrypted-media" 
              allowfullscreen 
              style="border-radius: 8px; margin: 10px 0;">
            </iframe>
            <div class="video-info" style="font-size: 12px; color: #888; margin-top: 5px;">
              üìπ ${matchedVideo.name}
            </div>
          </div>`;
              } else {
                console.log(`‚ùå No video found for "${repo.name}", showing placeholder`);
                videoEmbed = `
          <div class="video-placeholder" style="width: 100%; height: 200px; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 8px; margin: 10px 0; display: flex; align-items: center; justify-content: center; color: #666;">
            <div style="text-align: center;">
              <div style="font-size: 48px; margin-bottom: 10px;">üé¨</div>
              <div>Demo video coming soon</div>
              <div style="font-size: 10px; margin-top: 5px;">Looking for: ${repo.name}</div>
            </div>
          </div>`;
              }

              // Create the project card with proper indentation to match existing structure
              newProjectCards += `<div class="project-card">
          <div class="project-content">
            <h3><a href="${repo.html_url}" target="_blank" style="color: #ffd700; text-decoration: none;">${name}</a></h3>
            <p>${description}</p>
            <div class="project-video">${videoEmbed}</div>
            <div class="project-stats">
              <span>‚≠ê ${repo.stargazers_count}</span>
              <span>üìÖ ${date}</span>
              ${repo.language ? `<span>üíª ${repo.language}</span>` : ''}
            </div>
          </div>
        </div>
        `;
            }

            // Insert new projects
            if (!insertNewProjects(newProjectCards)) {
              console.error('‚ùå Failed to insert new projects into HTML');
              return;
            }

            // Update the metadata timestamp
            const now = new Date().toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Colombo',
              timeZoneName: 'short'
            });

            const metadataHtml = `<div class="portfolio-metadata">Last updated: <span class="last-updated">${now}</span></div>`;
            if (html.includes('portfolio-metadata')) {
              html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
            } else {
              html = html.replace(/(<footer)/, `${metadataHtml}\n\n    $1`);
            }

            fs.writeFileSync('index.html', html);
            console.log(`\nüéâ Portfolio updated successfully! Added ${newRepos.length} new project(s).`);
            
          } catch (error) {
            console.error('üí• Error updating portfolio:', error.message);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        })();
        EOF

        node update.js
        
        rm repos.json update.js

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "ü§ñ Auto-update portfolio with latest projects"
        git push
