name: Update Portfolio

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update portfolio
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch repositories and save to file
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/users/harishkavindauoj/repos?sort=updated&per_page=50" \
             > repos.json
        
        # Create and run Node.js script
        cat > update.js << 'EOF'
        const fs = require('fs');
        
        // Read files
        let html = fs.readFileSync('index.html', 'utf8');
        const allRepos = JSON.parse(fs.readFileSync('repos.json', 'utf8'));
        
        // Filter repositories
        const repos = allRepos
          .filter(repo => 
            !repo.fork && 
            !repo.private && 
            repo.description && 
            repo.description.length > 10 &&
            !repo.name.includes('.github.io') &&
            !repo.name.includes('config') &&
            !repo.name.toLowerCase().includes('readme')
          )
          .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))
          .slice(0, 5);
        
        console.log(`Found ${repos.length} repositories to display:`);
        repos.forEach(repo => console.log(`- ${repo.name}: ${repo.stargazers_count} stars`));
        
        // Generate project cards
        let projectCards = '';
        repos.forEach(repo => {
          // Format repository name for display
          const name = repo.name
            .replace(/-/g, ' ')
            .replace(/_/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
          
          const date = new Date(repo.updated_at).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          });
          
          // Don't truncate description - show full text
          const description = repo.description;
          
          // Video file name based on repository name (lowercase with hyphens)
          const videoFileName = repo.name.toLowerCase() + '.mp4';
          
          projectCards += `
        <div class="project-card">
            <div class="project-content">
                <h3><a href="${repo.html_url}" target="_blank" style="color: #ffd700; text-decoration: none;">${name}</a></h3>
                <p>${description}</p>
                <div class="project-video">
                    <video controls muted preload="metadata">
                        <source src="videos/${videoFileName}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <div class="project-stats">
                    <span>‚≠ê ${repo.stargazers_count}</span>
                    <span>üìÖ ${date}</span>
                    ${repo.language ? `<span>üíª ${repo.language}</span>` : ''}
                </div>
            </div>
        </div>`;
        });
        
        // Add See More card
        projectCards += `
        <div class="project-card">
            <div class="project-content" style="display: flex; justify-content: center; align-items: center; height: 180px;">
                <h3><a href="https://github.com/harishkavindauoj?tab=repositories" target="_blank" style="font-size: 3rem; color: #ffd700; text-decoration: none;">See More..</a></h3>
            </div>
        </div>`;
        
        // Replace project cards in HTML
        const regex = /<div class="project-cards">[\s\S]*?<\/div>/;
        const replacement = `<div class="project-cards">${projectCards}
    </div>`;
        
        html = html.replace(regex, replacement);
        
        // Add last updated timestamp (Sri Lankan Timezone)
        const now = new Date().toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Asia/Colombo',
        timeZoneName: 'short'
        });

        
        // Look for existing metadata or add before footer
        const metadataHtml = `                    <div class="portfolio-metadata">Last updated: <span class="last-updated">${now}</span></div>`;
        
        if (html.includes('portfolio-metadata')) {
          html = html.replace(/<div class="portfolio-metadata">.*?<\/div>/, metadataHtml);
        } else {
          html = html.replace(/(<footer)/, `${metadataHtml}\n\n    $1`);
        }
        
        // Write updated HTML
        fs.writeFileSync('index.html', html);
        console.log('Portfolio updated successfully!');
        EOF
        
        node update.js
        
        # Clean up temporary files
        rm repos.json update.js
    
    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add index.html
        git commit -m "ü§ñ Auto-update portfolio with latest projects"
        git push
